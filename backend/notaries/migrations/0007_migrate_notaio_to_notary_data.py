# Generated by Django 5.2.7 on 2025-10-20 21:46

from django.db import migrations


def migrate_notaio_data_to_notary(apps, schema_editor):
    """
    Copia TUTTI i dati da Notaio ‚Üí Notary.
    Preserva ogni singolo campo, nessun dato viene perso.
    """
    Notaio = apps.get_model('accounts', 'Notaio')
    Notary = apps.get_model('notaries', 'Notary')
    
    migrated_count = 0
    skipped_count = 0
    
    for notaio in Notaio.objects.all():
        try:
            # Trova il Notary corrispondente tramite lo stesso user
            notary = Notary.objects.filter(user=notaio.user).first()
            
            if not notary:
                print(f'‚ö†Ô∏è  Notary non trovato per {notaio.nome} {notaio.cognome}')
                skipped_count += 1
                continue
            
            # ‚úÖ COPIA TUTTI I DATI (nessuna perdita)
            
            # Dati anagrafici
            notary.nome = notaio.nome
            notary.cognome = notaio.cognome
            notary.sesso = notaio.sesso
            notary.data_nascita = notaio.data_nascita
            notary.luogo_nascita = notaio.luogo_nascita
            notary.codice_fiscale = notaio.codice_fiscale
            
            # Dati professionali
            notary.numero_iscrizione_albo = notaio.numero_iscrizione_albo
            notary.distretto_notarile = notaio.distretto_notarile
            notary.data_iscrizione_albo = notaio.data_iscrizione_albo
            notary.sede_notarile = notaio.sede_notarile
            notary.tipologia = notaio.tipologia
            
            # Studio (mantieni studio_name se gi√† presente, altrimenti usa denominazione_studio)
            if not notary.studio_name or notary.studio_name == 'Studio Notarile':
                notary.studio_name = notaio.denominazione_studio or f'{notaio.nome} {notaio.cognome}'
            
            # P.IVA
            notary.partita_iva = notaio.partita_iva
            
            # Contatti
            if notaio.telefono_studio:
                notary.phone = notaio.telefono_studio
            notary.cellulare = notaio.cellulare or ''
            if notaio.pec:
                notary.pec_address = notaio.pec
            if notaio.email_studio:
                notary.email_studio = notaio.email_studio
            if notaio.sito_web:
                notary.website = notaio.sito_web
            
            # Indirizzo (aggiorna solo se non gi√† presente)
            if notaio.indirizzo_studio and not notary.address_street:
                notary.address_street = f'{notaio.indirizzo_studio}, {notaio.civico}'
            if notaio.citta:
                notary.address_city = notaio.citta
            if notaio.provincia:
                notary.address_province = notaio.provincia
            if notaio.cap:
                notary.address_cap = notaio.cap
            if notaio.nazione:
                notary.address_country = notaio.nazione
            
            # Coordinate geografiche
            if notaio.latitudine:
                notary.latitude = float(notaio.latitudine)
            if notaio.longitudine:
                notary.longitude = float(notaio.longitudine)
            
            # Orari
            if notaio.orari_ricevimento:
                notary.orari_ricevimento = notaio.orari_ricevimento
            
            # Documenti
            if notaio.documento_identita:
                notary.documento_identita = notaio.documento_identita
            if notaio.certificato_iscrizione_albo:
                notary.certificato_iscrizione_albo = notaio.certificato_iscrizione_albo
            if notaio.visura_camerale:
                notary.visura_camerale = notaio.visura_camerale
            
            # Status
            notary.is_verified = notaio.is_verified
            notary.license_active = notaio.is_active
            
            # Salva tutte le modifiche
            notary.save()
            
            migrated_count += 1
            print(f'‚úÖ Migrato: {notaio.nome} {notaio.cognome}')
            
        except Exception as e:
            print(f'‚ùå Errore migrando {notaio.nome} {notaio.cognome}: {e}')
            skipped_count += 1
    
    print(f'\nüìä Migrazione completata:')
    print(f'   ‚úÖ Migrati: {migrated_count}')
    print(f'   ‚ö†Ô∏è  Saltati: {skipped_count}')
    print(f'   üì¶ Dati Notaio originali: PRESERVATI nel DB')


def reverse_migration(apps, schema_editor):
    """
    Reverse migration: non fa nulla, i dati in Notaio restano intatti.
    """
    print('‚è™ Reverse migration: dati Notaio preservati, nessuna modifica a Notary')
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('notaries', '0006_notary_cellulare_notary_certificato_iscrizione_albo_and_more'),
        ('accounts', '0001_initial'),  # Dipendenza da accounts per accedere a Notaio
    ]

    operations = [
        migrations.RunPython(migrate_notaio_data_to_notary, reverse_migration),
    ]
